generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
    STUDENT
    FACULTY
    INSTITUTE_ADMIN
    SUPER_ADMIN
}

model Profile {
    id   String @id @db.Uuid
    role Role   @default(STUDENT)

    firstName String?
    lastName  String?
    mobile    String?
    email     String?
    city      String?
    state     String?

    // Student Specific Fields
    optedCourseId String? @db.Uuid
    optedCourse   Course? @relation("CourseStudents", fields: [optedCourseId], references: [id], onDelete: Restrict)

    createdCourses Course[] @relation("CourseCreatedBy")
    updatedCourses Course[] @relation("CourseUpdatedBy")

    createdStages Stage[] @relation("StageCreatedBy")
    updatedStages Stage[] @relation("StageUpdatedBy")

    createdSubjects Subject[] @relation("SubjectCreatedBy")
    updatedSubjects Subject[] @relation("SubjectUpdatedBy")

    createdTopics Topic[] @relation("TopicCreatedBy")
    updatedTopics Topic[] @relation("TopicUpdatedBy")
}

model Course {
    id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    enabled  Boolean   @default(true)
    title    String    @unique
    stages   Stage[]
    students Profile[] @relation("CourseStudents")

    createdBy   Profile?  @relation("CourseCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
    createdById String?   @db.Uuid
    updatedBy   Profile?  @relation("CourseUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)
    updatedById String?   @db.Uuid
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @default(now())
}

model Stage {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    enabled     Boolean   @default(true)
    title       String
    course      Course    @relation(fields: [courseId], references: [id])
    courseId    String    @db.Uuid
    subjects    Subject[]
    createdBy   Profile?  @relation("StageCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
    createdById String?   @db.Uuid
    updatedBy   Profile?  @relation("StageUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)
    updatedById String?   @db.Uuid
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @default(now())
}

model Subject {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    enabled     Boolean   @default(true)
    title       String
    description String
    stage       Stage     @relation(fields: [stageId], references: [id])
    stageId     String    @db.Uuid
    topics      Topic[]
    createdBy   Profile?  @relation("SubjectCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
    createdById String?   @db.Uuid
    updatedBy   Profile?  @relation("SubjectUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)
    updatedById String?   @db.Uuid
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @default(now())
}

model Topic {
    id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    enabled       Boolean       @default(true)
    title         String
    description   String
    subject       Subject       @relation(fields: [subjectId], references: [id])
    subjectId     String        @db.Uuid
    videoLink     String?
    studyMaterial String?
    mcqQuestions  McqQuestion[]
    createdBy     Profile?      @relation("TopicCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
    createdById   String?       @db.Uuid
    updatedBy     Profile?      @relation("TopicUpdatedBy", fields: [updatedById], references: [id], onDelete: Restrict)
    updatedById   String?       @db.Uuid
    createdAt     DateTime      @default(now())
    updatedAt     DateTime?     @default(now())
}

model McqQuestion {
    id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    question      String
    options       String[]
    correctOption Int
    explanation   String
    topic         Topic    @relation(fields: [topicId], references: [id])
    topicId       String   @db.Uuid
}
